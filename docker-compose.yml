# docker-compose.yml
version: '3.8'
services:
  mlflow_server:
    build:
      context: .
      dockerfile: mlflow.Dockerfile
    container_name: mlflow_server
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns
    restart: always

  iris_predictor_app:
    image: 2023ac05026/iris-predictor-app:latest
    volumes:
      # THIS LINE CREATES THE SHARED PATH FOR THE APP
      - ./app/models:/app/models
    container_name: iris_predictor_app
    ports:
      - "5001:5001"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow_server:5000
    depends_on:
      - mlflow_server
    restart: always

  prometheus: # NEW SERVICE: Prometheus monitoring server
    image: prom/prometheus:latest # Uses the official Prometheus Docker image
    container_name: prometheus
    ports:
      - "9090:9090" # Maps host port 9090 to container port 9090 for accessing the Prometheus UI
    volumes:
      # Mounts your local prometheus.yml config file into the container's expected path
      - ./prometheus.yml:/etc/prometheus/prometheus.yml 
    command: # Specifies the command Prometheus will execute on startup
      - '--config.file=/etc/prometheus/prometheus.yml' # Tells Prometheus to use the mounted config file
      - '--web.enable-remote-write-receiver' # Optional: Enables remote write capabilities (not strictly needed for this setup)
    depends_on: # Ensures the iris_predictor_app starts before Prometheus
      - iris_predictor_app

  grafana:  # New Grafana service
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Exposes Grafana on port 3000
    volumes:
      # Optional: Persist Grafana data
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus # Ensure Prometheus is running before Grafana starts
    restart: always

volumes:
  grafana_data: {}